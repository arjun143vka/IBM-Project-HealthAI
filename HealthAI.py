# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a6uZwaWCyqFWBPDxCB19sI-3OniIvS4U
"""

!pip install transformers torch gradio -q
!pip install  pandas numpy plotly datetime timedelta -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# ===============================
# Load Model
# ===============================
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

if not torch.cuda.is_available():
    model.to("cpu")

# ===============================
# Utility Functions
# ===============================
def generate_response(prompt, max_new_tokens=500):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}
    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_new_tokens=max_new_tokens,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return response.strip()


# ===============================
# Disease Prediction
# ===============================
def disease_prediction(symptoms):
    prompt = f"You are a helpful medical assistant.\nSymptoms: {symptoms}\nProvide possible conditions, general medication, and lifestyle suggestions. Emphasize consulting a doctor.\n\nAnalysis:"
    return generate_response(prompt)

# ===============================
# Treatment Plan
# ===============================
def treatment_plan(condition, age, gender, medical_history):
    prompt = f"Generate personalized treatment suggestions.\nCondition: {condition}\nAge: {age}\nGender: {gender}\nHistory: {medical_history}\nInclude home remedies, general medications, and precautions. Emphasize consulting a doctor.\n\nTreatment Plan:"
    return generate_response(prompt)

# ===============================
# Patient Chat
# ===============================
chat_history = []

def patient_chat(user_message, history):
    prompt = f"You are a medical assistant chatbot. Patient says: {user_message}\nRespond clearly with safe, informative advice. Always advise seeing a doctor for serious conditions."
    response = generate_response(prompt)
    history.append((user_message, response))
    return history, history

# ===============================
# Health Analytics
# ===============================

def generate_sample_health_data():
    dates = pd.date_range(end=pd.Timestamp.today(), periods=10)
    df = pd.DataFrame({
        "Date": dates,
        "Heart Rate": [70, 72, 75, 74, 76, 77, 79, 80, 78, 81],
        "Blood Pressure Sys": [120, 118, 122, 121, 119, 123, 124, 125, 122, 121],
        "Blood Pressure Dia": [80, 82, 81, 79, 83, 84, 82, 81, 80, 82],
        "Blood Glucose": [95, 98, 100, 99, 101, 97, 102, 103, 98, 100]
    })
    symptom_freq = {"Headache": 3, "Fever": 4, "Cough": 2, "Fatigue": 1}
    return df, symptom_freq


def analyze_health(file):
    df, symptom_freq = generate_sample_health_data()

    # Heart Rate Chart
    fig_hr = go.Figure()
    fig_hr.add_trace(go.Scatter(x=df["Date"], y=df["Heart Rate"], mode='lines+markers', name="Heart Rate (bpm)"))
    fig_hr.update_layout(title="Heart Rate Over Time", yaxis_title="bpm")

    # Symptom Frequency Pie
    labels = list(symptom_freq.keys())
    values = list(symptom_freq.values())
    fig_pie = go.Figure(data=[go.Pie(labels=labels, values=values, hole=0.4)])
    fig_pie.update_layout(title="Symptom Frequency")

    insights = "Blood pressure and glucose are stable. Heart rate slightly elevated."
    return fig_hr, fig_pie, insights


# Sample data: 15 popular tablets
tablets = [
    {"name": "Paracetamol", "purpose": "Pain relief, Fever reduction"},
    {"name": "Ibuprofen", "purpose": "Pain relief, Anti-inflammatory"},
    {"name": "Aspirin", "purpose": "Pain relief, Blood thinner"},
    {"name": "Metformin", "purpose": "Type 2 Diabetes management"},
    {"name": "Amoxicillin", "purpose": "Antibiotic for infections"},
    {"name": "Omeprazole", "purpose": "Acid reflux, Heartburn"},
    {"name": "Atorvastatin", "purpose": "Cholesterol lowering"},
    {"name": "Levothyroxine", "purpose": "Hypothyroidism treatment"},
    {"name": "Cough Syrup", "purpose": "Cough and cold relief"},
    {"name": "Cetirizine", "purpose": "Allergy relief"},
    {"name": "Lisinopril", "purpose": "High blood pressure"},
    {"name": "Amlodipine", "purpose": "Hypertension management"},
    {"name": "Prednisone", "purpose": "Inflammation and immune suppression"},
    {"name": "Fluoxetine", "purpose": "Depression and anxiety"},
    {"name": "Azithromycin", "purpose": "Antibiotic for infections"}
]

def read_purpose(purpose):
    """Return text-to-speech output"""
    return purpose

# ===============================
# Hospital Data
# ===============================
hospital_data = {
    "Trichy": [
        {"name": "Apollo Hospital", "contact": "0431-2700800", "location": "Chennai Bypass Rd, Trichy"},
        {"name": "Kauvery Hospital", "contact": "0431-4022555", "location": "Tennur, Trichy"},
        {"name": "MIOT International", "contact": "0431-2200200", "location": "Srirangam, Trichy"}
    ],
    "Chennai": [
        {"name": "Apollo Hospitals Greams Road", "contact": "044-28293333", "location": "Greams Rd, Chennai"},
        {"name": "Fortis Malar Hospital", "contact": "044-42892222", "location": "Adyar, Chennai"},
        {"name": "MIOT Hospital", "contact": "044-42002288", "location": "Manapakkam, Chennai"}
    ],
    "Coimbatore": [
        {"name": "KG Hospital", "contact": "0422-2212121", "location": "Arts College Rd, Coimbatore"},
        {"name": "PSG Hospitals", "contact": "0422-2570170", "location": "Peelamedu, Coimbatore"},
        {"name": "KMCH", "contact": "0422-4323800", "location": "Avinashi Rd, Coimbatore"}
    ],
    "Madurai": [
        {"name": "Apollo Speciality Hospitals", "contact": "0452-2580890", "location": "KK Nagar, Madurai"},
        {"name": "Meenakshi Mission Hospital", "contact": "0452-2588741", "location": "Lake Area, Madurai"},
        {"name": "Velammal Medical College Hospital", "contact": "0452-7113333", "location": "Anuppanadi, Madurai"}
    ],
    "Salem": [
        {"name": "Kauvery Hospital", "contact": "0427-2229222", "location": "Seelanaickenpatti, Salem"},
        {"name": "Narayana Multispeciality Hospital", "contact": "0427-2222212", "location": "Narasingapuram, Salem"},
        {"name": "SIMS Chellum Hospital", "contact": "0427-2411241", "location": "Saradha College Rd, Salem"}
    ],
    "Rasipuram": [
        {"name": "Sri Gokulam Hospital", "contact": "04287-223311", "location": "Salem Main Rd, Rasipuram"},
        {"name": "Government Hospital", "contact": "04287-220050", "location": "NH Road, Rasipuram"},
        {"name": "Sri Balaji Hospital", "contact": "04287-224488", "location": "Bus Stand Rd, Rasipuram"}
    ],
    "Namakkal": [
        {"name": "Kongu Hospital", "contact": "04286-280233", "location": "Salem Rd, Namakkal"},
        {"name": "Seva Hospital", "contact": "04286-280444", "location": "Tiruchengode Rd, Namakkal"},
        {"name": "Arignar Anna Govt. Hospital", "contact": "04286-280100", "location": "Namakkal Town"}
    ],
    "Karur": [
        {"name": "Nalam Hospital", "contact": "04324-244200", "location": "Coimbatore Rd, Karur"},
        {"name": "Apollo Speciality Hospital", "contact": "04324-227070", "location": "Trichy Rd, Karur"},
        {"name": "Government Hospital", "contact": "04324-222333", "location": "Karur Town"}
    ],
    "Attur": [
        {"name": "Sri Gokulam Hospital", "contact": "04282-240055", "location": "Salem Main Rd, Attur"},
        {"name": "Government Hospital", "contact": "04282-242244", "location": "Attur Bus Stand"},
        {"name": "Lakshmi Hospital", "contact": "04282-245678", "location": "NH Road, Attur"}
    ],
    "Dindigul": [
        {"name": "Govt. Headquarters Hospital", "contact": "0451-2460100", "location": "Near Collectorate, Dindigul"},
        {"name": "Soundaraja Hospital", "contact": "0451-2462222", "location": "Palani Rd, Dindigul"},
        {"name": "PSG Hospital Dindigul", "contact": "0451-2455666", "location": "Anna Nagar, Dindigul"}
    ],
    "Thanjavur": [
        {"name": "Government Medical College Hospital", "contact": "04362-227001", "location": "Medical College Rd, Thanjavur"},
        {"name": "Raja Mirasdar Hospital", "contact": "04362-230123", "location": "Thanjavur Town"},
        {"name": "Thanjavur Medical Centre", "contact": "04362-245678", "location": "Trichy Rd, Thanjavur"}
    ],
    "Pudukkottai": [
        {"name": "Government Headquarters Hospital", "contact": "04322-221234", "location": "Pudukkottai Town"},
        {"name": "VKS Hospital", "contact": "04322-225678", "location": "Trichy Rd, Pudukkottai"},
        {"name": "Nalam Multispeciality Hospital", "contact": "04322-228888", "location": "Keeranur Rd, Pudukkottai"}
    ],
    "Erode": [
        {"name": "Lotus Hospitals", "contact": "0424-2223555", "location": "Sathy Rd, Erode"},
        {"name": "KMC Speciality Hospital", "contact": "0424-2222333", "location": "Perundurai Rd, Erode"},
        {"name": "Government Headquarters Hospital", "contact": "0424-2256789", "location": "Erode Town"}
    ],
    "Tiruppur": [
        {"name": "Lotus Hospital", "contact": "0421-2472555", "location": "Avinashi Rd, Tiruppur"},
        {"name": "Government Hospital", "contact": "0421-2200220", "location": "Kumaran Rd, Tiruppur"},
        {"name": "Kumaran Medical Centre", "contact": "0421-2222333", "location": "College Rd, Tiruppur"}
    ],
    "Palani": [
        {"name": "Arulmigu Dhandayuthapani Devasthanam Hospital", "contact": "04545-252500", "location": "Palani Temple Hill"},
        {"name": "Sri Gokulam Hospital", "contact": "04545-250800", "location": "Palani Town"},
        {"name": "Government Hospital", "contact": "04545-252222", "location": "Palani Main Rd"}
    ],
    "Bengaluru": [
        {"name": "Manipal Hospital", "contact": "080-22221111", "location": "Old Airport Rd, Bengaluru"},
        {"name": "Apollo Hospital", "contact": "080-26304050", "location": "Bannerghatta Rd, Bengaluru"},
        {"name": "Fortis Hospital", "contact": "080-66214444", "location": "Cunningham Rd, Bengaluru"}
    ],
    "Ooty": [
        {"name": "Government Hospital", "contact": "0423-2442222", "location": "Hospital Rd, Ooty"},
        {"name": "Nirmala Hospital", "contact": "0423-2442777", "location": "Coonoor Rd, Ooty"},
        {"name": "Woodlands Hospital", "contact": "0423-2443333", "location": "Charing Cross, Ooty"}
    ]
}
def search_hospitals(location):
    location = location.strip().title()
    if location in hospital_data:
        hospitals = hospital_data[location]
        result = "\n\n".join([f"🏥 {h['name']}\n📞 {h['contact']}\n📍 {h['location']}" for h in hospitals])
        return result
    else:
        return f"No hospital data available for {location}. Try: {', '.join(hospital_data.keys())}"



# ===============================
# Gradio Interface
# ===============================
with gr.Blocks() as app:
    gr.Markdown("# 🏥 Health AI Assistant")
    gr.Markdown("⚠️ **Disclaimer: This is for informational purposes only. Always consult healthcare professionals.**")


    with gr.Row():
        # Left Sidebar - Patient Profile
        with gr.Column(scale=1):
          gr.Markdown("### 🧑 Patient Profile")
          patient_name = gr.Textbox(label="Name",value='Arjun')
          patient_age = gr.Number(label="Age", value=30)
          patient_gender = gr.Dropdown(["Male", "Female", "Other"], label="Gender")
          patient_height = gr.Number(label="Height (cm)")
          patient_weight = gr.Number(label="Weight (kg)")
          patient_blood = gr.Textbox(label="Blood Group",value='A1+')
          patient_history = gr.Textbox(label="Medical History", placeholder="e.g., Diabetes, Hypertension")
          patient_meds = gr.Textbox(label="Current Medications")
          patient_allergies = gr.Textbox(label="Allergies")
          profile_state = gr.State()
          profile_btn = gr.Button("Save Profile")

          def save_profile(name, age, gender, height, weight, history, meds, allergies):
              return f"Name: {name}, Age: {age}, Gender: {gender}, Height: {height} cm, Weight: {weight} kg, History: {history}, Medications: {meds}, Allergies: {allergies}"


          profile_btn.click(
              save_profile,
              [patient_name, patient_age, patient_gender, patient_height, patient_weight,
              patient_history, patient_meds, patient_allergies]

          )

    with gr.Row():
        with gr.Tabs():
            # Disease Prediction
            with gr.TabItem("Disease Prediction"):
                symptoms_input = gr.Textbox(label="Enter Symptoms", placeholder="e.g., fever, cough, fatigue", lines=4)
                predict_btn = gr.Button("Analyze Symptoms")
                prediction_output = gr.Textbox(label="Possible Conditions & Recommendations", lines=15)
                predict_btn.click(disease_prediction, inputs=symptoms_input, outputs=prediction_output)

            # Treatment Plan
            with gr.TabItem("Treatment Plans"):
                condition_input = gr.Textbox(label="Medical Condition", placeholder="e.g., diabetes, migraine", lines=2)
                age_input = gr.Number(label="Age", value=20)
                gender_input = gr.Dropdown(choices=["Male", "Female", "Other"], label="Gender", value="Male")
                history_input = gr.Textbox(label="Medical History", placeholder="Previous conditions, allergies, medications or None", lines=3)
                plan_btn = gr.Button("Generate Treatment Plan")
                plan_output = gr.Textbox(label="Personalized Treatment Plan", lines=15)
                plan_btn.click(treatment_plan, inputs=[condition_input, age_input, gender_input, history_input], outputs=plan_output)


            # Health Analytics
            with gr.TabItem("Health Analytics"):
              chart1 = gr.Plot()
              chart2 = gr.Plot()
              insights = gr.Textbox(label="AI Health Insights")
              btn3 = gr.Button("Generate Analytics")
              btn3.click(analyze_health, None, [chart1, chart2, insights])

            with gr.TabItem("Tablet Info"):
            # Arrange in 3 rows × 5 columns
                for i in range(0, 15, 5):
                    with gr.Row():
                        for j in range(5):
                            tablet = tablets[i + j]
                            with gr.Column():
                                gr.Markdown(f"**{tablet['name']}**")
                                gr.Textbox(value=tablet['purpose'], label="Purpose", interactive=False)

            # Nearby Hospitals
            with gr.Tab("Nearby Hospitals"):
                location_input = gr.Textbox(label="Enter Location (e.g., Trichy, Chennai, Coimbatore)", placeholder="Search your city")
                search_btn = gr.Button("Find Hospitals")
                hospital_output = gr.Textbox(label="Hospitals Near You", lines=12)
                search_btn.click(search_hospitals, inputs=location_input, outputs=hospital_output)

            # Patient Chat
            with gr.TabItem("Patient Chat"):
                chatbot = gr.Chatbot(label="Chat with AI Doctor")
                msg = gr.Textbox(placeholder="Ask about your health...", label="Your Question")
                clear = gr.Button("Clear Chat")
                msg.submit(patient_chat, [msg, chatbot], [chatbot, chatbot])
                clear.click(lambda: [], None, chatbot, queue=False)



app.launch(share=True)